{
  "openapi": "3.0.1",
  "info": {
    "title": "Rick and Morty Info API",
    "description": "This API allows you to query, filter, and manage characters from the Rick and Morty universe.",
    "version": "v1"
  },
  "paths": {
    "/api/Auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logins the specified request.",
        "requestBody": {
          "description": "The request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/RickAndMorty/import": {
      "post": {
        "tags": [
          "RickAndMorty"
        ],
        "summary": "Imports characters that are not present in the database. If present, they are skipped.",
        "responses": {
          "200": {
            "description": "Returns the count of characters successfully inserted.",
            "content": {
              "text/plain": {
                "schema": { }
              },
              "application/json": {
                "schema": { }
              },
              "text/json": {
                "schema": { }
              }
            }
          },
          "500": {
            "description": "Returns an error message if an unexpected error occurred during the import.",
            "content": {
              "text/plain": {
                "schema": { }
              },
              "application/json": {
                "schema": { }
              },
              "text/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/RickAndMorty/status": {
      "get": {
        "tags": [
          "RickAndMorty"
        ],
        "summary": "Gets the characters filtered by their status (Alive, Dead, Unknown).",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "The status of the characters to retrieve (Alive, Dead, or Unknown).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of characters."
          },
          "400": {
            "description": "Returned if the status provided is invalid."
          },
          "500": {
            "description": "Returned if an unexpected error occurs."
          }
        }
      }
    },
    "/api/RickAndMorty/{id}": {
      "delete": {
        "tags": [
          "RickAndMorty"
        ],
        "summary": "Deletes the character associated with the provided ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id for the character to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Character deleted successfully"
          },
          "404": {
            "description": "Character not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Gets or sets the username.",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "Gets or sets the password.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Login request model."
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Enter full JWT token including 'Bearer ' prefix",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}