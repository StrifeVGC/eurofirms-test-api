<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PruebaEurofirms.Api</name>
    </assembly>
    <members>
        <member name="T:PruebaEurofirms.Controllers.RickAndMortyController">
            <summary>
            The controller for Rick and Morty characters.
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="M:PruebaEurofirms.Controllers.RickAndMortyController.#ctor(MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{PruebaEurofirms.Controllers.RickAndMortyController})">
            <summary>
            Initializes a new instance of the <see cref="T:PruebaEurofirms.Controllers.RickAndMortyController"/> class.
            </summary>
            <param name="mediator">The mediator.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:PruebaEurofirms.Controllers.RickAndMortyController.ImportCharacters">
            <summary>
            Imports characters that are not present in the database. If present, they are skipped.
            </summary>
            <returns>Number of inserted characters.</returns>
            <response code="200">Returns the count of characters successfully inserted.</response>
            <response code="500">Returns an error message if an unexpected error occurred during the import.</response>
        </member>
        <member name="M:PruebaEurofirms.Controllers.RickAndMortyController.GetCharactersByStatus(System.String)">
            <summary>
            Gets the characters filtered by their status (Alive, Dead, Unknown).
            </summary>
            <param name="status">The status of the characters to retrieve (Alive, Dead, or Unknown).</param>
            <returns>Returns a list of characters matching the provided status.</returns>
            <response code="200">Returns the list of characters.</response>
            <response code="400">Returned if the status provided is invalid.</response>
            <response code="500">Returned if an unexpected error occurs.</response>
        </member>
        <member name="M:PruebaEurofirms.Controllers.RickAndMortyController.DeleteCharacter(System.Int32)">
            <summary>
            Deletes the character associated with the provided ID.
            </summary>
            <param name="id">The Id for the character to be deleted.</param>
            <returns>Success message in case the character was deleted</returns>
            <response code="200">Character deleted successfully</response>
            <response code="404">Character not found</response>
        </member>
        <member name="T:CharacterStatusValidator">
            <summary>
            The fluent validator for Character Status. Validates that the status is one of the allowed values in the Enum.
            </summary>
        </member>
        <member name="M:CharacterStatusValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CharacterStatusValidator"/> class.
            </summary>
        </member>
        <member name="M:CharacterStatusValidator.BeAValidStatus(System.String)">
            <summary>
            Checks if the provided status is a valid enum value.
            </summary>
            <param name="status">The status.</param>
            <returns></returns>
        </member>
    </members>
</doc>
